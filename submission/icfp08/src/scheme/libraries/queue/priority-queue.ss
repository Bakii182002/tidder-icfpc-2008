#lang scheme

(provide make prio? empty? length insert! extract-min!)

(define-struct prio (<-fn count vector) #:mutable)

(define (make <-fn)
  (make-prio <-fn 0 (make-vector 16)))

(define (full? p)
  (= (prio-count p)
     (vector-length (prio-vector p))))

(define (grow! p)
  (let* ((old-vector (prio-vector p))
         (old-length (vector-length old-vector))
         (new-length (max 16 (* 2 old-length)))
         (new-vector (make-vector new-length)))
    (vector-copy! new-vector 0 old-vector)
    (set-prio-vector! p new-vector)))

(define (insert! p item)
  (when (full? p)
    (grow! p))
  (let* ((v     (prio-vector p))
         (count (prio-count p))
         (vi    item)
         (<-fn  (prio-<-fn p)))
    (set-prio-count! p (add1 count))
    (let bubble-up! ((i count))
      (if (zero? i)
          (vector-set! v i vi)
          (let* ((j  (quotient (sub1 i) 2))
                 (vj (vector-ref v j)))
            (if (<-fn vj vi)
                (vector-set! v i vi)
                (begin (vector-set! v i vj)
                       (bubble-up! j))))))))

(define (empty? p)
  (zero? (prio-count p)))

(define length prio-count)

(define (extract-min! p)
  (let* ((v            (prio-vector p))
         (<-fn         (prio-<-fn p))
         (first-value  (vector-ref v 0))
         (last-index   (sub1 (prio-count p)))
         (last-value   (vector-ref v last-index)))

    (define (bubble-down! i vi)
      (let ((j (add1 (* 2 i))))
        (if (>= j last-index)
            (vector-set! v i vi)
            (let ((vj (vector-ref v j))
                  (k (add1 j)))
              (if (>= k last-index)
                  (bubble-down-aux! i vi j vj)
                  (let ((vk (vector-ref v k)))
                    (if (<-fn vk vj)
                        (bubble-down-aux! i vi k vk)
                        (bubble-down-aux! i vi j vj))))))))
    
    (define (bubble-down-aux! i vi j vj)
      (if (<-fn vi vj)
          (vector-set! v i vi)
          (begin (vector-set! v i vj)
                 (bubble-down! j vi))))

    (set-prio-count! p last-index)
    (vector-set! v last-index #f)
    (bubble-down! 0 last-value)
    first-value))

(define (test)
  (define a (make <))
  (insert! a 1)
  (printf "~s~n" (extract-min! a))
  (printf "--------~n")
  (insert! a 1)
  (insert! a 3)
  (insert! a 2)
  (insert! a 5)
  (insert! a 0)
  (insert! a 4)
  (printf "~s~n" (extract-min! a))
  (printf "~s~n" (extract-min! a))
  (printf "~s~n" (extract-min! a))
  (insert! a 7)
  (insert! a 6)
  (printf "~s~n" (extract-min! a))
  (printf "~s~n" (extract-min! a))
  (printf "~s~n" (extract-min! a))
  (printf "~s~n" (extract-min! a))
  (printf "~s~n" (empty? a))
  (printf "~s~n" (extract-min! a))
  (printf "~s~n" (empty? a))
  )