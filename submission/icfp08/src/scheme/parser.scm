#lang scheme

(provide message-available? get-message)
(require (prefix-in net: "network.scm"))
(require (prefix-in msg: "messages.scm"))
(require "misc-syntax.ss")
(require mzlib/pregexp)
(require scheme/match)
(require (only-in rnrs/base-6 assert))

(define chars '())

(define (message-finished?)
  (and (not (empty? chars))
       (or (equal? (car chars) #\;)
           (equal? (car chars) 'eof))))

(define (message-available?)
  (or (message-finished?)
      (and (net:char-available?)
           (begin
             (set! chars (cons (net:get-char) chars))
             (message-available?)))))

(define (get-message)
  (and (message-finished?)
       (if (equal? (car chars) 'eof)
           'eof
           (parse (list->string (reverse (begin0 chars (set! chars '()))))))))

(define (parse msg)
  (let ((tokens (filter (lambda (x) (not (zero? (string-length x))))
                        (pregexp-split "[ \n;]" msg))))
    (define (n) (string->number (pop! tokens)))
    (define (accel) (case (string-ref (car tokens) 0)
                      ((#\a) 1)
                      ((#\-) 0)
                      ((#\b) -1)))
    (define (turn) (case (string-ref (pop! tokens) 1)
                     ((#\L) -2)
                     ((#\l) -1)
                     ((#\-) 0)
                     ((#\r) 1)
                     ((#\R) 2)))
    (define (vehicle) (msg:make-vehicle (n) (n) (n) (n)))
    (define (seen) (match (pop! tokens)
                     ("b" (msg:make-object 'boulder (n) (n) (n)))
                     ("c" (msg:make-object 'crater (n) (n) (n)))
                     ("h" (msg:make-object 'home-base (n) (n) (n)))
                     ("m" (vehicle))))
    (define (many x)
      (if (not (null? tokens))
          (cons (x) (many x))
          '()))
    (define (many-seen) (many seen))
    (define (mk constructor . parsers)
      (apply constructor (map (lambda (f) (f)) parsers)))
    (match (pop! tokens)
      ("I" (mk msg:make-init n n n n n n n n))
      ("T" (mk msg:make-telemetry n accel turn vehicle many-seen))
      ("B" (msg:make-failure n (lambda () 'crash)))
      ("C" (msg:make-failure n (lambda () 'crater)))
      ("K" (msg:make-failure n (lambda () 'killed)))
      ("S" (msg:make-success n))
      ("E" (msg:make-end n n)))))

(define (test-parse)
  (define t (parse "T 3450 aL -234.040 811.100 47.5 8.450 b -220.000 750.000 12.000 m -240.000 812.000 90.0 9.100 ;"))
  (printf "~a~n" t)
  (printf "~a~n" (msg:telemetry-vehicle t))
  (assert (equal? t
                  (msg:make-telemetry 3450 1 -2
                                      (msg:make-vehicle -234.040 811.100 47.5 8.450)
                                      (list (msg:make-object 'boulder -220.000 750.000 12.000)
                                            (msg:make-vehicle -240.000 812.000 90.0 9.100))))))