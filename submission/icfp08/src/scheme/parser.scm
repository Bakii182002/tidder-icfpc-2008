#lang scheme

(provide message-available? get-message)
(require (prefix-in net: "network.scm"))
(require (prefix-in msg: "messages.scm"))
(require "misc-syntax.ss")
(require mzlib/pregexp)

(define chars '())

(define (message-finished?)
  (and (not (empty? chars)) (equal? (car chars) #\;)))

(define (message-available?)
  (or (message-finished?)
      (and (net:char-available?)
           (begin
             (set! chars (cons (net:get-char) chars))
             (message-finished?)))))

(define (get-message)
  (and (message-finished?)
       (parse-message (list->string (reverse (begin0 chars (set! chars '())))))))

(define (parse-message msg)
  (let ((tokens (filter (lambda (x) (not (zero? (string-length x))))
                         (pregexp-split "[ ;]" msg))))
    (define (n) (string->number (pop! tokens)))
    (define (accel) (case (string-ref (car tokens) 0)
                      ((#\a) 1)
                      ((#\-) 0)
                      ((#\b) -1)))
    (define (turn) (case (string-ref (pop! tokens) 1)
                     ((#\L) -2)
                     ((#\l) -1)
                     ((#\-) 0)
                     ((#\r) 1)
                     ((#\R) 2)))
    (define (vehicle) (msg:make-vehicle (n) (n) (n) (n)))
    (define (seen) (case (pop! tokens)
                     ((#\b) (msg:make-object 'boulder (n) (n) (n)))
                     ((#\c) (msg:make-object 'crater (n) (n) (n)))
                     ((#\h) (msg:make-object 'home-base (n) (n) (n)))
                     ((#\m) (vehicle))))
    (define (many x)
      (if (not (null? tokens))
          (cons (x) (many x))
          '()))
    (write tokens)
 
    (case (string->symbol (pop! tokens))
      (("I") (msg:make-init (n) (n) (n) (n) (n) (n) (n) (n)))
      (("T") (msg:make-telemetry (n) (accel) (turn) (vehicle) (many seen)))
      (("B") (msg:make-failure 'crash))
      (("C") (msg:make-failure 'crater))
      (("K") (msg:make-failure 'killed))
      (("S") (msg:make-success))
      (("E") (msg:make-end)))))
